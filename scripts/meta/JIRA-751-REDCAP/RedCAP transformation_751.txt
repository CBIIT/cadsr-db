RedCAP transformation steps:
1.rename all instrument.csv into Phenix#.csv and iplace them in  directory 'C:\meta\JIRA_#\CSV_FILES
2. create control file LOAD_REDCAP_all.ctl for all Phenix#.csv like:



OPTIONS ( ERRORS= 10000, SKIP=1)
LOAD DATA

INFILE 'C:\META\JIRA-751\CSV_FILES\PX010502.csv' "str '\r'"
I......................
..........................
INFILE 'C:\META\JIRA-751\CSV_FILES\PX770301.csv' "str '\r'"

INTO TABLE "MSDRDEV"."REDCAPPROTOCOL_TEMP"
append
FIELDS TERMINATED BY ','
OPTIONALLY ENCLOSED BY '"'
TRAILING NULLCOLS   
(              
  VARIABLE_FIELD_NAME   CHAR(400) ,
    FORM_NAME CHAR(400), 
    SECTION CHAR(1500) , 
    FIELD_TYPE CHAR(100), 
    FIELD_LABEL CHAR(4000) ,
    CHOICES CHAR(4000), 
    FIELD_NOTE CHAR(100),
TEXT_VALID_TYPE     ,
  TEXT_VALID_MIN       ,
  TEXT_VALID_MAX       ,
  IDENTIFIER           ,
  LOGIC           CHAR(1000)    ,
  REQUIRED             ,
  CUSTOM_ALIGNMENT     ,
  Q_NMB_SERV,
  MATRIX_GROUP_NAME    ,
  MATRIX_RANK,
QUESTION SEQUENCE(0,1) )

3.delete from MSDRDEV.REDCAPPROTOCOL_TEMP;
4.load data to "SBREXT"."REDCAPPROTOCOL_TEMP" via SQL LOADER using  the contrl file LOAD_REDCAP_all.ctl
table DESC 
CREATE TABLE MSDRDEV.REDCAPPROTOCOL_TEMP
(
  VARIABLE_FIELD_NAME  VARCHAR2(400 BYTE),
  FORM_NAME            VARCHAR2(400 BYTE),
  SECTION              VARCHAR2(3000 BYTE),
  FIELD_TYPE           VARCHAR2(100 BYTE),
  FIELD_LABEL          CLOB,
  FIELD_NOTE           VARCHAR2(100 BYTE),
  TEXT_VALID_TYPE      VARCHAR2(100 BYTE),
  TEXT_VALID_MIN       VARCHAR2(100 BYTE),
  TEXT_VALID_MAX       VARCHAR2(100 BYTE),
  IDENTIFIER           VARCHAR2(100 BYTE),
  LOGIC                VARCHAR2(3000 BYTE),
  REQUIRED             VARCHAR2(50 BYTE),
  CUSTOM_ALIGNMENT     VARCHAR2(100 BYTE),
  Q_NMB_SERV           VARCHAR2(100 BYTE),
  MATRIX_GROUP_NAME    VARCHAR2(100 BYTE),
  MATRIX_RANK          VARCHAR2(100 BYTE),
  QUESTION             NUMBER,
  CHOICES              CLOB
)
5.create table for current JIRA which appends with JIRA # like
CREATE TABLE MSDRDEV.REDCAP_PROTOCOL_751(JIRA-#)
(
  VARIABLE_FIELD_NAME  VARCHAR2(400 BYTE),
  FORM_NAME            VARCHAR2(400 BYTE),
  SECTION              VARCHAR2(3000 BYTE),
  SECTION_SEQ          NUMBER,
  SECTION_Q_SEQ        NUMBER,
  FIELD_TYPE           VARCHAR2(100 BYTE),
  CHOICES              LONG,
  FIELD_NOTE           VARCHAR2(100 BYTE),
  QUESTION             NUMBER,
  TEXT_VALID_TYPE      VARCHAR2(30 BYTE),
  TEXT_VALID_MIN       VARCHAR2(60 BYTE),
  TEXT_VALID_MAX       VARCHAR2(60 BYTE),
  IDENTIFIER           VARCHAR2(100 BYTE),
  LOGIC                VARCHAR2(2000 BYTE),
  REQUIRED             VARCHAR2(5 BYTE),
  CUSTOM_ALIGNMENT     VARCHAR2(100 BYTE),
  MATRIX_GROUP_NAME    VARCHAR2(100 BYTE),
  MATRIX_RANK          NUMBER(6,2),
  Q_NMB_SERV           NUMBER,
  PROTOCOL             VARCHAR2(40 BYTE),
  FIELD_LABEL          VARCHAR2(4000 BYTE),
  INSTRUCTIONS         VARCHAR2(4000 CHAR),
  VAL_MIN              VARCHAR2(100 BYTE),
  VAL_MAX              VARCHAR2(100 BYTE),
  VAL_TYPE             VARCHAR2(100 BYTE),
  QUESTION_CSV         CLUB,
  FORM_QUESTION        VARCHAR2(2000 BYTE),
  QUEST_TB_QUESTION    VARCHAR2(4000 BYTE),
  FORM_NAME_NEW        VARCHAR2(400 BYTE),
  FORM_Q_NUM   NUMBER
)


6.delete from REDCAPPROTOCOL_TEMP where Form_Name='Form Name' or Form_Name is  null;


insert into REDCAP_PROTOCOL_751
 (
 VARIABLE_FIELD_NAME ,
 FORM_NAME ,
 SECTION , 
 FIELD_TYPE ,
 FIELD_LABEL ,
 CHOICES ,
 FIELD_NOTE ,
 QUESTION ,
 TEXT_VALID_TYPE ,
 TEXT_VALID_MIN ,
 TEXT_VALID_MAX ,
 IDENTIFIER ,
 LOGIC ,
 REQUIRED ,
 CUSTOM_ALIGNMENT ,
 MATRIX_GROUP_NAME , 
 MATRIX_RANK ,
 PROTOCOL ,
 Q_NMB_SERV ,
 QUESTION_CSV 
)
select 
VARIABLE_FIELD_NAME ,
 FORM_NAME ,
 SECTION ,
 FIELD_TYPE ,
 substr(FIELD_LABEL, 1, 2000 ) ,
 CHOICES ,
 FIELD_NOTE ,
 TRIM(QUESTION) ,
 TEXT_VALID_TYPE ,
 TEXT_VALID_MIN ,
 TEXT_VALID_MAX ,
 IDENTIFIER ,
 TRIM(LOGIC) ,
 REQUIRED ,
 CUSTOM_ALIGNMENT ,
 MATRIX_GROUP_NAME ,
 MATRIX_RANK ,
 'PX'||SUBSTR(TRIM(FIELD_NOTE),-6) , 
 Q_NMB_SERV ,
 substr(FIELD_LABEL, 1, 4000 ) 
from REDCAPPROTOCOL_TEMP;




7.a.
  update REDCAP_PROTOCOL_751 set field_label=replace (VARIABLE_FIELD_NAME,'_',' '), QUESTION_CSV =replace (VARIABLE_FIELD_NAME,'_',' ') 
  where field_label is null or field_label like '%???%'
 
 7.b.update REDCAP_PROTOCOL_751 set FORM_QUESTION =
 CASE 
 when length(FIELD_LABEL||VARIABLE_FIELD_NAME)>1997 then  substr(FIELD_LABEL,1,(1986-length(VARIABLE_FIELD_NAME)))||'..TRUNCATED ('||VARIABLE_FIELD_NAME||')'
 else 
 FIELD_LABEL||' ('||VARIABLE_FIELD_NAME||')'
 end,
  QUEST_TB_QUESTION =CASE 
 when length(QUESTION_CSV||VARIABLE_FIELD_NAME)>3997 
 then substr(QUESTION_CSV,1,(3986-length(VARIABLE_FIELD_NAME)))||'..TRUNCATED ('||VARIABLE_FIELD_NAME||')'
 else 
 QUESTION_CSV||' ('||VARIABLE_FIELD_NAME||')'
 end;

???????????

7.c update  REDCAP_PROTOCOL_NEW set LOGIC=substr(LOGIC,1,245)||'TRUNCATED'  where length(LOGIC)>255;

????????????

8.UPDATE FORM_NAME_NEW in REDCAP_PROTOCOL_751

8.a
 UPDATE REDCAP_PROTOCOL_751 set FORM_NAME_NEW=
 CASE WHEN INSTR(substr(FORM_NAME,7),'-')=0 then 'PhenX '||protocol||' - '||INITCAP(replace(substr(trim(FORM_NAME),7),'_',' '))
 WHEN INSTR(substr(FORM_NAME,7),'-')=1 then 'PhenX '||protocol||' - '||INITCAP(trim(replace(substr(FORM_NAME,8),'_',' ')))
 end  
 where lower(FORM_NAME) like '%phenx_%'
 
 8.b 
 update SBREXT.REDCAP_PROTOCOL_751 set choices='1 , YES|0 , NO'
  where FIELD_TYPE like'%yes%'
 
8.c
UPDATE REDCAP_PROTOCOL_751 set 
VAL_MIN=DECODE(TEXT_VALID_MIN,NULL,NULL,'minLength='||TEXT_VALID_MIN||';'),
VAL_MAX=DECODE(TEXT_VALID_MAX,NULL,NULL,'maxLength='||TEXT_VALID_MAX||';'),
VAL_TYPE=DECODE(TEXT_VALID_TYPE,NULL,NULL,'datatype='||TEXT_VALID_TYPE||';')
--,LOGIC=DECODE(LOGIC,NULL,NULL,LOGIC||';')
where (TEXT_VALID_MIN is not null or TEXT_VALID_MAX is not null or TEXT_VALID_TYPE is not null
) and 
dbms_lob.getlength(choices) = 0;

8.d
UPDATE REDCAP_PROTOCOL_751 set 
INSTRUCTIONS=VAL_TYPE||VAL_MIN||VAL_MAX||LOGIC
where (TEXT_VALID_MIN is not null or TEXT_VALID_MAX is not null or TEXT_VALID_TYPE is not null
or logic is not null) and FIELD_TYPE<>'calc';

UPDATE REDCAP_PROTOCOL_751 set 
INSTRUCTIONS='Calculation ;'||VAL_TYPE||VAL_MIN||VAL_MAX||LOGIC
where FIELD_TYPE='calc';
 
 ------------------------------check by-------------------------------------------------

 select distinct FORM_NAME,CASE WHEN INSTR(substr(FORM_NAME,7),'-')=0 then 'PhenX '||protocol||' - '||INITCAP(replace(substr(trim(FORM_NAME),7),'_',' '))
 WHEN INSTR(substr(FORM_NAME,7),'-')=1 then 'PhenX '||protocol||' - '||INITCAP(trim(replace(substr(FORM_NAME,8),'_',' ')))
 end 
 from REDCAP_PROTOCOL_751
where lower(FORM_NAME) like '%phenx_%'


9. Update column QUESTION in table REDCAP_PROTOCOL_751 for each protocol starting from 0

merge into REDCAP_PROTOCOL_751 t1
using (select min(question)question,PROTOCOL
from REDCAP_PROTOCOL_751 group by PROTOCOL ) t2
on (t1.PROTOCOL = t2.PROTOCOL)
when matched then 
update set t1.question = t1.question-t2.question


10.Populate sections in REDCAP_PROTOCOL_751:



10.1. Find min Question Number for protocol which is >0 and set it to 0.

 UPDATE REDCAP_PROTOCOL_test set FORM_Q_num=QUESTION-1  where protocol||form_name in
 --select distinct protocol||form_name from REDCAP_PROTOCOL_751  where protocol||form_name in
 (
 select protocol||form_name from(
 
 select MIN_QUEST, protocol, form_name,SECTION_SEQ,SECTION_Q_SEQ,QUESTION,SECTION
 from(
 select  min(Question) over  (partition by protocol, form_name order by protocol, form_name ) as MIN_QUEST,
 protocol, form_name,SECTION_SEQ,SECTION_Q_SEQ,QUESTION,SECTION
from REDCAP_PROTOCOL_751)--where form_name='phenx_cancer_personal_and_family_history')
where MIN_QUEST>0 and MIN_QUEST=QUESTION
)
);

UPDATE REDCAP_PROTOCOL_751 set FORM_Q_num=QUESTION where protocol||form_name in
 --select distinct protocol||form_name,form_NAME_NEW from REDCAP_PROTOCOL_751  where protocol||form_name in
 (
 select protocol||form_name from(
 
 select MIN_QUEST, protocol, form_name,SECTION_SEQ,SECTION_Q_SEQ,QUESTION,SECTION
 from(
 select  min(Question) over  (partition by protocol, form_name order by protocol, form_name ) as MIN_QUEST,
 protocol, form_name,SECTION_SEQ,SECTION_Q_SEQ,QUESTION,SECTION
from REDCAP_PROTOCOL_751 where protocol not like 'Instructions%')--where form_name='phenx_cancer_personal_and_family_history')
where MIN_QUEST=0 and MIN_QUEST=QUESTION
)
);
10.2
UPDATE SECTION NUMBER(SECTION_SEQ) ,SECTION QUESTION NUMBER(ECTION_Q_SEQ) in REDCAP_PROTOCOL_751
exec MSDRDEV.redCapSaction_populate3 ;
exec MSDRDEV.redCapSact_Quest_populate3;

___________________________________________________________________SP___________________________________________________________________________________

CREATE OR REPLACE PROCEDURE MSDRDEV.redCapSaction_populate3 
AS

/*CURSOR CUR_RC IS select r.protocol,FORM_NAME,r.QUESTION,SECTION, SECTION_SEQ 
FROM REDCAP_PROTOCOL_test r
where NVL(SECTION,'A')<>'A'
and SECTION_SEQ is null
order by r.protocol,FORM_NAME,QUESTION;*/
    CURSOR CUR_RC IS select protocol,FORM_NAME,FORM_Q_NUM,SECTION, SECTION_SEQ ,SECTION_Q_SEQ
    FROM MSDRDEV.REDCAP_PROTOCOL_751 
    where SECTION is not NULL
    and SECTION_SEQ is  null
    and FORM_Q_num is not null
    order by protocol,FORM_NAME,FORM_Q_num; 
     
 errmsg VARCHAR2(2000):='';
 V_sec_N number;
 V_sec_QN number;
 V_pr_SEC_N number;
 V_MIN_SEC_Q number;
 
BEGIN
for i in CUR_RC loop
BEGIN
 IF i.FORM_Q_num=0 then 
 V_sec_N :=0; 
 V_sec_QN:=0;
 ELSE
 SELECT min(FORM_Q_num) into V_MIN_SEC_Q 
 from REDCAP_PROTOCOL_751
 where SECTION is not NULL
 and protocol=i.protocol
 and FORM_NAME=i.FORM_NAME;
 
 IF V_MIN_SEC_Q=i.FORM_Q_num THEN
 
 V_sec_N :=1;
 ELSE
 
 V_sec_N :=V_sec_N+1;
 END IF;
 END IF;
 
 UPDATE REDCAP_PROTOCOL_751 SET SECTION_SEQ=V_sec_N , SECTION_Q_SEQ=0
 WHERE protocol=i.protocol
 and FORM_NAME=i.FORM_NAME
 and FORM_Q_num =i.FORM_Q_num
 and SECTION=i.SECTION
 and SECTION_SEQ is null;
 
 
 EXCEPTION
 WHEN OTHERS THEN
 errmsg := SQLERRM;
 dbms_output.put_line('errmsg3 - '||errmsg);
  insert into REPORTS_ERROR_LOG VALUES (i.FORM_Q_NUM||','||i.protocol,  errmsg, sysdate);
  commit;
 end; 
 end loop;

commit;

END ;
/
___________________________________SP_______________________________________________________

CREATE OR REPLACE PROCEDURE MSDRDEV.redCapSact_Quest_populate3
AS

    CURSOR CUR_RC IS select protocol,FORM_NAME,FORM_Q_NUM,SECTION, SECTION_SEQ ,SECTION_Q_SEQ
    FROM MSDRDEV.REDCAP_PROTOCOL_751
    where SECTION_SEQ is not null
    and SECTION_Q_SEQ=0
    and SECTION is not NULL
    and FORM_Q_NUM is not null
   --and protocol like '%PX741401%'
    order by protocol,FORM_NAME,FORM_Q_NUM;
    errmsg VARCHAR2(2000):='';
    V_sec_NC number;
    V_sec_QN number;
    V_sec_NEXT number;
    V_sec_MAX number;
    V_sec_QN number;
    V_QC_NC number;
    V_QC_NCEXT number;
    

  BEGIN
   for i in CUR_RC loop
   
     BEGIN
            V_sec_NC:=i.SECTION_SEQ;
            V_QC_NC:=i.FORM_Q_NUM;
            
            select MAX(SECTION_SEQ) into V_sec_MAX
            FROM MSDRDEV.REDCAP_PROTOCOL_751
            where  protocol=i.protocol
            and FORM_NAME=i.FORM_NAME
            ; 
            dbms_output.put_line('V_sec_MAX - '||V_sec_MAX||' V_sec_NC -'||i.SECTION_SEQ);
            
            IF V_sec_MAX> i.SECTION_SEQ THEN
            
            --find next section number and seq number in form
            select SECTION_SEQ,FORM_Q_NUM into V_sec_NEXT,V_QC_NCEXT
            FROM MSDRDEV.REDCAP_PROTOCOL_751
            where  protocol=i.protocol
            and FORM_NAME=i.FORM_NAME
            and SECTION is not NULL
            and SECTION_SEQ =i.SECTION_SEQ+1;
            END IF;
          


 
            DECLARE
            CURSOR C_nosec IS select protocol,FORM_NAME,FORM_Q_NUM,SECTION, SECTION_SEQ ,SECTION_Q_SEQ
            FROM MSDRDEV.REDCAP_PROTOCOL_751
            where  protocol=i.protocol
            and FORM_NAME=i.FORM_NAME
            and SECTION is NULL
            and ((FORM_Q_NUM >V_QC_NC and FORM_Q_NUM <V_QC_NCEXT and V_sec_MAX>V_sec_NC) 
            or  (FORM_Q_NUM >V_QC_NC and V_sec_MAX=V_sec_NC))
            order by FORM_Q_NUM;


            BEGIN 
                for r in C_nosec loop
                    BEGIN 
                    UPDATE REDCAP_PROTOCOL_751 SET SECTION_SEQ=V_sec_NC, SECTION_Q_SEQ=r.FORM_Q_NUM-V_QC_NC
                    WHERE protocol=r.protocol
                    and FORM_NAME=r.FORM_NAME
                    and FORM_Q_NUM =r.FORM_Q_NUM 
                    and SECTION_SEQ is null
                    and SECTION_Q_SEQ is null;

                    --dbms_output.put_line('output2 - V_sec_N='||V_sec_N||' V_sec_QN='||V_sec_QN);
                    commit;

                    EXCEPTION
                    WHEN OTHERS THEN
                    errmsg := SQLERRM;
                    dbms_output.put_line('errmsg3 - '||errmsg);
                    rollback;
                     insert into REPORTS_ERROR_LOG VALUES (r.FORM_Q_NUM||','||r.protocol,  errmsg, sysdate);
                     commit;
                    end;
                end loop;
            END;
            
            EXCEPTION
                    WHEN OTHERS THEN
                    errmsg := SQLERRM;
                    dbms_output.put_line('errmsg3 - '||errmsg);
                    rollback;
                     insert into REPORTS_ERROR_LOG VALUES (i.FORM_Q_NUM||','||i.protocol,  errmsg, sysdate);
                     commit;
            END ;
     end loop;

    
 END ;--end of proc
/
__________________________________________________________________________SP_________________________________________


10.3 UPDATE REDCAP_PROTOCOL_751 SET SECTION_SEQ=0 , SECTION_Q_SEQ=FORM_Q_NUM
 WHERE SECTION_SEQ is null and SECTION_Q_SEQ is null  and SECTION is null and protocol not like 'Instructions%';
 
 
11.Insert data in MSDRDEV.REDCAP_SECTION_751

CREATE TABLE MSDRDEV.REDCAP_SECTION_751
(
  PROTOCOL       VARCHAR2(40 BYTE),
  FORM_NAME      VARCHAR2(400 BYTE),
  SECTION_SEQ    NUMBER,
  SECTION_Q_SEQ  NUMBER,
  QUESTION       NUMBER,
  SECTION        VARCHAR2(2000 BYTE),
  SECTION_NEW    VARCHAR2(2000 BYTE),
  INSTRUCTION    VARCHAR2(2000 BYTE)
)

 INSERT INTO REDCAP_SECTION_751
( PROTOCOL ,
 FORM_NAME ,
 SECTION_SEQ,
 SECTION_Q_SEQ,
 QUESTION ,
SECTION,
SECTION_NEW )
 SELECT 
 distinct q.protocol, q.form_name_new,SECTION_SEQ,SECTION_Q_SEQ,FORM_Q_NUM,q.SECTION,
 case
 when q.SECTION is NULL or q.SECTION like '%phenx_%' then substr(q.form_name_new,18) 
   when q.SECTION is not NULL and q.SECTION not like '%phenx_%' then q.SECTION
   end
 --select*
 from REDCAP_PROTOCOL_751 q
 where SECTION_Q_SEQ=0 ;


12.POPULATE REDCAP_PROTOCOL_FORM_571
CREATE TABLE MSDRDEV.REDCAP_PROTOCOL_FORM_571
(
  PROTOCOL              VARCHAR2(40 BYTE),
  FORM_NAME             VARCHAR2(449 BYTE),
  PREFERRED_DEFINITION  VARCHAR2(2000 BYTE)     NOT NULL,
  PROTOCOL_NAME         VARCHAR2(500 BYTE),
  INSTRUCTION           VARCHAR2(2000 BYTE)
)

INSERT INTO REDCAP_PROTOCOL_FORM_751
( PROTOCOL ,
 FORM_NAME  )
 SELECT 
 distinct  f.protocol, form_name_new,PREFERRED_DEFINITION,p.long_name
 from REDCAP_PROTOCOL_751 f,
 --select*from 
 SBREXT.PROTOCOLS_EXT p
 where preferred_name like'PX%'
 and f.protocol=preferred_name
 
 

13.create table SBREXT.REDCAP_VALUE_CODE to move string value column CHOICES to 
multiple records for each '||' .
CREATE TABLE SBREXT.REDCAP_VALUE_CODE_751
( PROTOCOL             VARCHAR2(50)  ,
FORM_NAME   VARCHAR2(255)  ,
  QUESTION            NUMBER,
  VAL_NAME        VARCHAR2(500 )     ,
  VAL_VALUE            VARCHAR2(500 BYTE),
  VAL_ORDER NUMBER   , 
  ELM_ORDER  VARCHAR2(50)  ,
  PIPE_NUM NUMBER)


14.populate table with SQL statment for new records

delete pipe from 1st position
 a.UPDATE SBREXT.REDCAP_PROTOCOL_NEW set choices=substr(choices,2)
 where choices is not null and substr(choices,1,1)='|'
 
 14.b insert in REDCAP_VALUE_CODE with no pipes and FIELD_TYPE like'%calc%'
 INSERT INTO SBREXT.REDCAP_VALUE_CODE
 ( PROTOCOL ,
 FORM_NAME ,
 QUESTION ,
 VAL_name ,
 VAL_VALUE ,
 VAL_ORDER,
 PIPE_NUM,
 ELM_ORDER)
 select 
 PROTOCOL,
 FORM_NAME ,
 question,
 CASE WHEN length(choices)> 254
 THEN substr(replace(choices,' '),1,243)||'..TRUNCATED'
 ELSE choices 
 END,
 choices,
 0,
 0,
 choices 
 from SBREXT.REDCAP_PROTOCOL_NEW 
 where choices is not null 
 and instr(choices,'|')=0
 and FIELD_TYPE like'%calc%';
	
	
 
	
14.c insert in REDCAP_VALUE_CODE with no pipes
 1.when many','
	INSERT INTO SBREXT.REDCAP_VALUE_CODE
 ( PROTOCOL ,
 FORM_NAME ,
 QUESTION ,
 VAL_name ,
 VAL_VALUE ,
 VAL_ORDER,
 PIPE_NUM,
 ELM_ORDER)
 select 
 PROTOCOL,
 FORM_NAME ,
 question,
 choices ,
 choices,
 0,
 0,
 choices 
 from SBREXT.REDCAP_PROTOCOL_NEW 
 where choices is not null and instr(choices,'|')=0
 and REGEXP_COUNT(choices,',')>1
	and trim(FIELD_TYPE) <>'calc';
	
14.d.when many',' FIELD_TYPE)='descriptive' and no '|'
 INSERT INTO SBREXT.REDCAP_VALUE_CODE
 ( PROTOCOL ,
 FORM_NAME ,
 QUESTION ,
 VAL_name ,
 VAL_VALUE ,
 VAL_ORDER,
 PIPE_NUM,
 ELM_ORDER)
 select 
 PROTOCOL,
 FORM_NAME ,
 question, 
 CASE WHEN length(choices)> 254
 THEN substr(choices,1,243)||'..TRUNCATED'
 ELSE choices 
 END,
 choices,
 0,
 0,
 choices 
 from SBREXT.REDCAP_PROTOCOL_NEW 
 where choices is not null and instr(choices,'|')=0
 and REGEXP_COUNT(choices,',')>1
 and trim(FIELD_TYPE)='descriptive';
 
14.e insert in REDCAP_VALUE_CODE with no pipes, many',' (FIELD_TYPE) not in ('calc','descriptive'); 
  INSERT INTO REDCAP_VALUE_CODE_751
 ( PROTOCOL ,
 FORM_NAME ,
 QUESTION ,
 VAL_name ,
 VAL_VALUE ,
 VAL_ORDER,
 PIPE_NUM,
 ELM_ORDER,
 VAL_VAL_NAME)
 select 
 PROTOCOL,
 FORM_NAME , 
 question, 
 CASE WHEN trim(choices)='99,99,9999 , unknown'
 THEN '99,99,9999'
 ELSE substr(choices,1,(instr(choices,',')-1))
 END,
 CASE WHEN trim(choices)='99,99,9999 , unknown'
 THEN 'unknown'
 ELSE substr(choices,(instr(choices,',')+1))
 END,
 0,
 0,
 0,
 choices
 from
 (select 
 PROTOCOL,
 FORM_NAME ,
 question, 
 cast(trim(CHOICES )  as varchar2(320)) as CHOICES
 from  REDCAP_PROTOCOL_751
  where dbms_lob.getlength(choices) >0
and dbms_lob.instr(CHOICES,'|')=0 
);
 and trim(FIELD_TYPE) not in ('calc','descriptive');
 
 
14.f when only 1 separated coma.
 
 INSERT INTO SBREXT.REDCAP_VALUE_CODE
 ( PROTOCOL ,
 FORM_NAME ,
 QUESTION ,
 VAL_name ,
 VAL_VALUE ,
 VAL_ORDER,
 PIPE_NUM,
 ELM_ORDER,
 VAL_VAL_NAME)
 )
 select 
 PROTOCOL,
 FORM_NAME ,
 question,
 substr(choices,1,(instr(choices,',')-1)) ,
 substr(choices,(instr(choices,',')+1)),
 0,
 0,
 0,
 choices 
 from SBREXT.REDCAP_PROTOCOL_751 
 where choices is not null and instr(choices,'|')=0
 and REGEXP_COUNT(choices,',')=1;
	
15.
CREATE OR REPLACE FORCE VIEW MSDRDEV.REDCAP_VALUE_VW751
(
    PROTOCOL,
    QUESTION
)
AS
    SELECT DISTINCT p.protocol PROTOCOL, p.question
      FROM MSDRDEV.REDCAP_PROTOCOL_751  p
           LEFT OUTER JOIN REDCAP_VALUE_CODE_751 s
               ON p.protocol = s.protocol AND p.question = s.question
     WHERE s.protocol || s.question IS NULL AND choices IS NOT NULL;
	 
15a.
I INSERT INTO  REDCAP_VALUE_CODE_751
( PROTOCOL             ,
FORM_NAME ,
  QUESTION           ,
  VAL_name           ,
  VAL_VALUE            ,
  VAL_ORDER,
  PIPE_NUM,
  ELM_ORDER,
  VAL_VAL_NAME)
  select 
  PROTOCOL,
  FORM_NAME ,
  question,
  substr(CHOICES,1,instr(CHOICES,',')-1) ,--VAL_NAME substring CHOICES before first ',' and ||
  substr(CHOICES,instr(CHOICES,',')+1),--VAL_NAME substring CHOICES after first ',' and  before||
  ELM_ORDER-1,
  PIPE_NUM, --Pipe position in string CHOICES
  ELM_ORDER,
  CHOICES ---substring CHOICES before || 
 from(
 select 
    cast(trim(regexp_substr(t.CHOICES, '[^|]+', 1, levels.column_value)  )  as varchar2(500)) as  CHOICES,levels.column_value  ELM_ORDER, FORM_NAME ,question,
  protocol,dbms_lob.instr(CHOICES,'[^|]+', 1, levels.column_value) AS PIPE_NUM
           from  (select  FORM_NAME_NEW FORM_NAME ,choices,protocol,question from REDCAP_PROTOCOL_751 where dbms_lob.getlength(choices) >0)t,
      table(cast(multiset(
        select level from dual 
        connect by level <= length (regexp_replace(t.CHOICES, '[^|]+')) + 1
      ) as sys.OdciNumberList)) levels)
      order by 1,3,6;
      
      ------------------check--------------------------------
select count(*) cnt,PROTOCOL  ,FORM_NAME ,QUESTION ,VAL_name ,VAL_VALUE ,  VAL_ORDER
from
REDCAP_VALUE_CODE_751
GROUP by PROTOCOL  ,FORM_NAME ,QUESTION ,VAL_name ,VAL_VALUE ,  VAL_ORDER
having count(*)>1
order by 2,4,7;


delete from REDCAP_VALUE_CODE_751 where val_name is null and val_value is null


select p.protocol,p.question,p.choices,val_val_name,val_order from 
REDCAP_PROTOCOL_751 p,
REDCAP_VALUE_CODE_751 v 
where p.protocol=v.protocol(+)
and p.question=v.question(+)
and V.protocol is null
and v.question is null
and   dbms_lob.getlength(choices) >0



select distinct question,protocol from  REDCAP_PROTOCOL_751 where dbms_lob.getlength(choices) >0
minus
select distinct question,protocol from  REDCAP_VALUE_CODE_751 


12.create data types for XML query
drop view REDCAP_VW;
drop type REDCAP_FORM_S;
drop type REDCAP_SECTION_LIST_T;
drop type REDCAP_SECTION_T;
drop type REDCAP_INSTRUCTIONS_T;
drop type REDCAP_QUESTION_T;
drop type REDCAP_QUESTION_LIST_T;
drop type REDCAP_validValue_LIST_T;
drop type REDCAP_validValue_T;

CREATE OR REPLACE TYPE REDCAP_validValue_T   as object(
"displayOrder"                                     NUMBER
,"value"                                      VARCHAR2(200)
,"meaningText"                                  VARCHAR2(200)  );
CREATE OR REPLACE TYPE REDCAP_validValue_LIST_T AS TABLE OF REDCAP_validValue_T ;     
 
CREATE OR REPLACE TYPE REDCAP_INSTRUCTIONS_T as object(
"text" VARCHAR2(1000));   
    
CREATE OR REPLACE TYPE REDCAP_PROTOCOL_T as object(
"protocolID" VARCHAR2(50),
"longName"  VARCHAR2(200),
"context"   VARCHAR2(10),
"shortName"  VARCHAR2(50),
"preferredDefinition"  VARCHAR2(2000)); 
CREATE OR REPLACE TYPE REDCAP_QUESTION_T   as object(
"isDerived"       VARCHAR2(8),
"displayOrder"     NUMBER,
"dateCreated"      VARCHAR2(30),
"questionText"     VARCHAR2(4000),
"instruction"      REDCAP_INSTRUCTIONS_T,
"isEditable"       VARCHAR2(8),
"isMandatory"      VARCHAR2(8),
"multiValue"       VARCHAR2(8),
"validValues_xx"       REDCAP_validValue_LIST_T 
);

CREATE OR REPLACE TYPE REDCAP_QUESTION_LIST_T AS TABLE OF REDCAP_QUESTION_T  ;

 
CREATE OR REPLACE TYPE  REDCAP_SECTION_T    as object(
"displayOrder"                                     NUMBER
,"maximumModuleRepeat"                              NUMBER
,"createdBy"   VARCHAR2(40)
, "dateCreated" VARCHAR2(30)
, "longName"    VARCHAR2(1500)      
, "preferredDefinition" VARCHAR2(1500)
,"questions_xx"                                 REDCAP_QUESTION_LIST_T 
)
;
CREATE OR REPLACE TYPE  REDCAP_SECTION_LIST_T  AS TABLE OF REDCAP_SECTION_T ;  
   
CREATE OR REPLACE TYPE REDCAP_FORM_S    as object(
    
"context"                                    VARCHAR2(40)
,"createdBy"                                      VARCHAR2(100)
,"dateCreated"                         VARCHAR2(30)
,"longName"  VARCHAR2(150)   
,"changeNote"                              VARCHAR2(40)
,"preferredDefinition"                      VARCHAR2(2000)
,"cadsrRAI"             VARCHAR2(40)
,"publicid"  NUMBER
,"version"  NUMBER
,"workflowStatusName" VARCHAR2(40)
,"type"              VARCHAR2(5) 
,"headerInstruction"       VARCHAR2(100)                          
,"footerInstruction"  VARCHAR2(100)
,"modules_xx" REDCAP_SECTION_LIST_T
,"protocol" REDCAP_PROTOCOL_T);
    
 
13.create view REDCAP_VW 
   
CREATE OR REPLACE TYPE REDCAP_FORM_S    as object(
    
"context"                                    VARCHAR2(40)
,"createdBy"                                      VARCHAR2(100)
,"dateCreated"                         VARCHAR2(30)
,"longName"  VARCHAR2(150)   
,"changeNote"                              VARCHAR2(40)
,"preferredDefinition"                      VARCHAR2(2000)
,"cadsrRAI"             VARCHAR2(40)
,"publicid"  NUMBER
,"version"  NUMBER
,"workflowStatusName" VARCHAR2(40)
,"type"              VARCHAR2(5) 
,"headerInstruction"       VARCHAR2(100)                          
,"footerInstruction"  VARCHAR2(100)
,"modules_xx" REDCAP_SECTION_LIST_T
,"protocol" REDCAP_PROTOCOL_T)
;
create or replace view REDCAP_VW as     
SELECT 
'PhenX Protocols - '||p.protocol "collectionName",
'Load PhenX '||p.protocol "collectionDescription",
REDCAP_FORM_S (
'PhenX' ,
'dwarzel',
TO_CHAR(SYSDATE,'YYYY-MM-DD')||'T'||TO_CHAR(SYSDATE,'HH24:MI:SS'),
INITCAP(replace(replace(lower(form_name) ,'_',' '),'phenx','')),
'Uploaded via FormLoader' ,
NVL(pe.preferred_definition,'The Protocol is Not Found'),
'2.16.840.1.113883.3.26.2',
'',
'1.0',
'DRAFT NEW',
'CRF',             
'',
'' ,
CAST(MULTISET(SELECT   NVL(s.SECTION_SEQ,'0') ,
                          '0',
                          'panh',
                           TO_CHAR(SYSDATE,'YYYY-MM-DD')||'T'||TO_CHAR(SYSDATE,'HH24:MI:SS'),
                           nvl(s.SECTION,'N/A'),
                           nvl(s.SECTION,'No definition'),
                           CAST(MULTISET(SELECT'false',
                                                q.section_Q_seq,
                                                TO_CHAR(SYSDATE,'YYYY-MM-DD')||'T'||TO_CHAR(SYSDATE,'HH24:MI:SS'),
                                                q.field_label,
                                               REDCAP_INSTRUCTIONS_T( q.LOGIC ) ,
                                                'No',
                                                 NVL(q.REQUIRED,'No'),
                                                'No',
                                                 CAST ( MULTISET ( SELECT   VAL_ORDER, 
                                                                            VAL_name    , 
                                                                            VAL_VALUE   
                                                                            from  REDCAP_VALUE_CODE u
                                                                            where u.question=q.question
                                                                            and u.protocol=q.protocol
                                                          order by VAL_ORDER ) AS REDCAP_validValue_LIST_T) "ValidValue"
                           from  REDCAP_PROTOCOL_NEW  q
                           where 1=1
                           and  q.protocol =s.protocol
                           and s.SECTION_SEQ=q.SECTION_SEQ
                           order by q.section_Q_seq) as REDCAP_QUESTION_LIST_T) "Question"
FROM REDCAP_SECTION s 
WHERE p.protocol = s.protocol(+)
ORDER BY s.SECTION_SEQ)AS REDCAP_SECTION_LIST_T
),
REDCAP_PROTOCOL_T(pe.protocol_id,                  
                   long_name,
                   'PhenX',
                  pe.preferred_name, 
                   NVL(pe.preferred_definition,'The Protocol is Not Found') )
 )as "form"
FROM 
(select distinct  protocol ,form_name from REDCAP_PROTOCOL_NEW) p
,
protocols_ext pe
where pe.preferred_name(+)=p.protocol order by protocol,form_name; 

17.CREATE TABLE REDCAP_XML:

CREATE TABLE SBREXT.REDCAP_XML
(
  PROTOCOL  VARCHAR2(30 BYTE),
  TEXT      CLOB,
  file_name VARCHAR2(200 BYTE),
  CREATED_DATE DATE
);

18.INSERT XML body and collection in the table via SP

exec SBREXT.xml_RedCop_insert;

CREATE OR REPLACE PROCEDURE SBREXT.xml_RedCop_insert as
  

CURSOR c_protocol IS
SELECT distinct  r.protocol,form_name
FROM REDCAP_PROTOCOL_NEW r
left outer join REDCAP_XML x
on r.protocol=x.protocol
where x.protocol is null;


 l_file_name      VARCHAR2 (100):='NA';
   l_file_path      VARCHAR2 (200);
   l_result         CLOB:=null;
   l_xmldoc          CLOB:=null;
   l_protocol        VARCHAR2 (30);
   errmsg VARCHAR2(500):='Non';
   v_protocol VARCHAR2(50):='';
BEGIN 
 FOR rec IN c_protocol LOOP  
 BEGIN 
        l_file_path := 'SBREXT_DIR';       
        v_protocol:=rec.protocol ;
         l_file_name := v_protocol||'_'||rec.form_name||' _GeneratedFormFinalFormCartV2.xml';
        
        SELECT dbms_xmlgen.getxml( 'select*from REDCAP_VW   where "collectionName" like'||''''||'%'||v_protocol||'%'||'''')
        INTO l_result
        FROM DUAL ;
        insert into REDCAP_XML VALUES (v_protocol,l_result, l_file_name ,SYSDATE);
 
      --dbms_xslprocessor.clob2file(l_xmldoc,  l_file_path, l_file_name, nls_charset_id('UTF8'));

      
    EXCEPTION
    WHEN OTHERS THEN
    errmsg := SQLERRM;
         dbms_output.put_line('errmsg  - '||errmsg);
        insert into REPORTS_ERROR_LOG VALUES (substr(l_file_name,1,49),  errmsg, sysdate);
        
     commit;   
        END;
END LOOP;
    

END;
/
CREATE TABLE SBREXT.REDCAP_ERROR_LOG
(
  FILE_NAME         VARCHAR2(50 BYTE),
  REPORT_ERROR_TXT  VARCHAR2(1100 BYTE),
  DATE_PROCESSED    DATE
);
19.exec REDCAP_XML_TRANSFORM;

 REDCAP_XML_TRANSFORMATION (rename tags):

CREATE OR REPLACE PROCEDURE SBREXT.REDCAP_XML_TRANSFORM IS

l_file_name VARCHAR2(500):='Phenx FORMS';
 errmsg VARCHAR2(500):='Non';
BEGIN 
   
update redcap_xml set text=replace(text,'REDCAP_SECTION_T','module');
update redcap_xml set text=replace(text,'REDCAP_QUESTION_T','question');
update redcap_xml set text=replace(text,'</ROW>','</forms>');
update redcap_xml set text=replace(text,'<ROW>','<forms>');
UPDATE redcap_xml set text=replace(text,'REDCAP_VALIDVALUE_T','validValue');
UPDATE redcap_xml set text=replace(text,'<modules__x0040_>'||chr(10) );
UPDATE redcap_xml set text=replace(text,'</modules__x0040_>'||chr(10) );
UPDATE redcap_xml set text=replace(text,'<questions__x0040_>'||chr(10) );--
UPDATE redcap_xml set text=replace(text,'</questions__x0040_>'||chr(10) );
UPDATE redcap_xml set text=replace(text,'<ROWSET>'||chr(10) ) ;
UPDATE redcap_xml set text=replace(text,'</ROWSET>'||chr(10) );--where protocol like'%PX0171001%';
UPDATE redcap_xml set text=replace(text,'</validValues__x0040_>'||chr(10) );
UPDATE redcap_xml set text=replace(text,'<validValues__x0040_>'||chr(10) );

UPDATE redcap_xml set text=replace(text,'<ROWSET>'||chr(10) ) ;
UPDATE redcap_xml set text=replace(text,'</ROWSET>'||chr(10) );
update redcap_xml set text=replace(text,'</ROW>','</forms>');
update redcap_xml set text=replace(text,'<ROW>','<forms>');

update redcap_xml set text=replace(text,'REDCAP_SECTION_T','module');
update redcap_xml set text=replace(text,'REDCAP_QUESTION_T','question');
UPDATE redcap_xml set text=replace(text,'REDCAP_VALIDVALUE_T','validValue');
UPDATE redcap_xml set text=replace(text,'<validValues__x0040_>'||chr(10) );
UPDATE redcap_xml set text=replace(text,'</validValues__x0040_>'||chr(10) );
UPDATE redcap_xml set text=replace(text,'<validValues__x0040_/>'||chr(10) );
UPDATE redcap_xml set text=replace(text,'CFR','CRF' );
--UPDATE redcap_xml set text=replace(text,'2016-08-01 16:20:20',TO_CHAR(SYSDATE,'YYYY-MM-DD')||'T00:00:00.0');
      
 EXCEPTION
    WHEN OTHERS THEN
   errmsg := SQLERRM;
         dbms_output.put_line('errmsg  - '||errmsg);
        insert into REPORTS_ERROR_LOG VALUES (l_file_name,  errmsg, sysdate);
    

END ;
/
21.exec REDCAP_XML_TRANSFORM;
8.compare the result with latest ....GeneratedFormFinalFormCartV2.xml

9.create SP to wright the xml files to directory 'SBREXT_DIR'



   
    SELECT dbms_xmlgen.getxml( 'select*from REDCAP_VW ')
--INTO result
FROM DUAL ;
select*
--delete 
from  PROTOCOL_QC_EXT   where QC_IDSEQ in(select QC_IDSEQ
--delete 
from QUEST_CONTENTS_EXT 
where date_created>sysdate-2
and QC_IDSEQ in  (SELECT QC_IDSEQ
       --   delete
           FROM quest_contents_ext
          WHERE qtl_name = 'CRF' 
          and   date_created>sysdate-3
          and change_note='Uploaded via FormLoader'));
		  
		  
		  select x.protocol,long_name from redcap_xml x,
protocols_ext p
where p.preferred_name(+)=x.protocol
and  x.sent is not null 
order by 2




CREATE TABLE SBREXT.REDCAP_XML_GROUP
(
  PROTOCOL      VARCHAR2(30 BYTE),
  pr_seq         NUMBER,
  group_num      NUMBER
);


CREATE OR REPLACE PROCEDURE SBREXT.REDCAP_XML_GROUP_insert as
  

CURSOR c_protocol IS
SELECT distinct  r.protocol
FROM REDCAP_PROTOCOL_NEW r
order by 1;

   l_form_seq      number:='0'; 
   errmsg VARCHAR2(500):='Non';
   v_protocol VARCHAR2(50):='';
BEGIN 
 FOR rec IN c_protocol LOOP  
 BEGIN 
        l_form_seq:=l_form_seq+1;  
        insert into SBREXT.REDCAP_XML_GROUP VALUES (rec.protocol,l_form_seq, null); 
      
    EXCEPTION
    WHEN OTHERS THEN
    errmsg := SQLERRM;
         dbms_output.put_line('errmsg  - '||errmsg);
        insert into REPORTS_ERROR_LOG VALUES (rec.protocol,  errmsg, sysdate);
        
     commit;   
        END;
END LOOP;
    

END;
/
update SBREXT.REDCAP_XML_GROUP set group_num =case
when length(to_char(pr_seq))=1 then 0
when length(to_char(pr_seq))=2 then  to_NUMBER(substr(to_char(pr_seq),1,1))  
when length(to_char(pr_seq))=3 and pr_seq>529 then 53
else to_NUMBER(substr(to_char(pr_seq),1,2))
end;